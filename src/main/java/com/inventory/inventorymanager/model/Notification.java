package com.inventory.inventorymanager.model;

import com.inventory.inventorymanager.exceptions.NotificationValidationException;
import jakarta.persistence.*;
import java.time.LocalDateTime;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Represents a notification in the inventory system.
 * Notifications are triggered based on certain conditions or events.
 *
 * @author Gaetano Barreca
 * @version 1.0
 */
@Entity
@Table(name = "notifications")
public class Notification {
    private static final Logger logger = LoggerFactory.getLogger(Notification.class);

    /**
     * Unique identifier for the notification, autogenerated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Many-to-one relationship with the Product entity.
     * Represents the product associated with the notification.
     */
    @ManyToOne
    @JoinColumn(name = "product_id")
    private Product product;

    /**
     * The content or message of the notification.
     */
    @Column(name = "message")
    private String message;

    /**
     * Timestamp indicating when the notification was generated.
     */
    @Column(name = "timestamp", columnDefinition = "DATETIME DEFAULT CURRENT_TIMESTAMP")
    private LocalDateTime timestamp;

    /**
     * Default constructor, required by JPA.
     */
    public Notification() {
    }

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Product getProduct() {
        return product;
    }

    public void setProduct(Product product) {
        this.product = product;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        if (message == null || message.trim().isEmpty()) {
            logger.warn("Attempt to set an empty notification message");
            throw new NotificationValidationException("Notification message cannot be empty");
        }
        this.message = message;
    }

    public LocalDateTime getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }

    /**
     * Returns a string representation of the notification, useful for debugging and logging.
     *
     * @return A string representation of the notification.
     */
    @Override
    public String toString() {
        return "Notification{" +
                "id=" + id +
                ", product=" + product +
                ", message='" + message + '\'' +
                ", timestamp=" + timestamp +
                '}';
    }
}
