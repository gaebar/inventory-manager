package com.inventory.inventorymanager.model;

import jakarta.persistence.*;

import java.time.LocalDate;

/**
 * Represents a product in an inventory system.
 * <p>
 * A product has an ID, name, expiry date, and other attributes that
 * are critical for inventory management.
 * </p>
 *
 * @author Gaetano Barreca
 * @version 1.0
 */
@Entity
@Table
public class Product {

    /**
     * The unique identifier for the product.
     * This ID is autogenerated by the database.
     */

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long productID;
    private String productName;
    private LocalDate expiryDate;
    private Integer timeDurationForMarkDown;
    private Integer minThreshold;
    private Integer maxThreshold;
    private Integer currentStock;

    // I am using three constructors
    // 1. No arg constructor

    /**
     * Default constructor, initializes a new object with no fields set.
     * <p>
     * This no-argument constructor is required by JPA (Jakarta Persistence API)
     * and is not intended for direct use.
     * </p>
     */
    public Product() {
    }

    // 2. Full Constructor

    /**
     * Initializes a new product with all fields set.
     *
     * <p>
     * This constructor is useful when all attributes of the product are known at the time
     * of object creation, such as when converting from a database record.
     * </p>
     *
     * @param productID The unique ID of the product
     * @param productName The name of the product
     * @param expiryDate The expiry date of the product
     * @param timeDurationForMarkDown The time duration for markdown
     * @param minThreshold The minimum threshold for alerts
     * @param maxThreshold The maximum threshold for stock
     * @param currentStock The current stock level
     */
    public Product(Long productID, String productName, LocalDate expiryDate, int timeDurationForMarkDown, int minThreshold, int maxThreshold, int currentStock) {
        this.productID = productID;
        this.productName = productName;
        this.expiryDate = expiryDate;
        this.timeDurationForMarkDown = timeDurationForMarkDown;
        this.minThreshold = minThreshold;
        this.maxThreshold = maxThreshold;
        this.currentStock = currentStock;
    }

    // 3. Constructor without ID as the database will generate one for us

    /**
     * Initializes a new product with all fields except the ID.
     * The ID will be autogenerated when inserted into a database.
     *
     * <p>
     * This constructor is useful for creating new records, where the database
     * will generate a unique ID upon insertion.
     * </p>
     *
     * @param productName The name of the product
     * @param expiryDate The expiry date of the product
     * @param timeDurationForMarkDown The time duration for markdown
     * @param minThreshold The minimum threshold for alerts
     * @param maxThreshold The maximum threshold for stock
     * @param currentStock The current stock level
     */
    public Product(String productName, LocalDate expiryDate, int timeDurationForMarkDown, int minThreshold, int maxThreshold, int currentStock) {
        this.productName = productName;
        this.expiryDate = expiryDate;
        this.timeDurationForMarkDown = timeDurationForMarkDown;
        this.minThreshold = minThreshold;
        this.maxThreshold = maxThreshold;
        this.currentStock = currentStock;
    }

    // Getters and Setters
    public Long getProductID() {
        return productID;
    }

    public void setProductID(Long productID) {
        this.productID = productID;
    }

    public String getProductName() {
        return productName;
    }

    public void setProductName(String productName) {
        this.productName = productName;
    }

    public LocalDate getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(LocalDate expiryDate) {
        this.expiryDate = expiryDate;
    }

    public int getTimeDurationForMarkDown() {
        return timeDurationForMarkDown;
    }

    public void setTimeDurationForMarkDown(int timeDurationForMarkDown) {
        this.timeDurationForMarkDown = timeDurationForMarkDown;
    }

    public int getMinThreshold() {
        return minThreshold;
    }

    public void setMinThreshold(int minThreshold) {
        this.minThreshold = minThreshold;
    }

    public int getMaxThreshold() {
        return maxThreshold;
    }

    public void setMaxThreshold(int maxThreshold) {
        this.maxThreshold = maxThreshold;
    }

    public int getCurrentStock() {
        return currentStock;
    }

    public void setCurrentStock(int currentStock) {
        this.currentStock = currentStock;
    }

    @Override
    public String toString() {
        return "Product{" +
                "productID='" + productID + '\'' +
                ", productName='" + productName + '\'' +
                ", expiryDate=" + expiryDate +
                ", timeDurationForMarkDown=" + timeDurationForMarkDown +
                ", minThreshold=" + minThreshold +
                ", maxThreshold=" + maxThreshold +
                ", currentStock=" + currentStock +
                '}';
    }
}

