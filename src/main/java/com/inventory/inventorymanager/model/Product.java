package com.inventory.inventorymanager.model;

import com.inventory.inventorymanager.exceptions.ProductValidationException;
import jakarta.persistence.*;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotEmpty;
import java.time.LocalDate;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Represents a product in the inventory system.
 * Requirement 7: Define the structure of a product with its fields.
 *
 * @author Gaetano Barreca
 * @version 1.0
 */
@Entity
@Table(name = "products", schema = "inventory_manager")
public class Product {

    private static final Logger logger = LoggerFactory.getLogger(Product.class);


    /**
     * Unique identifier for the product, autogenerated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "product_id")
    private Long productID;

    /**
     * The name of the product.
     * This field is unique and cannot be null.
     */
    @NotEmpty(message = "Product name should not be empty")
    @Column(name = "product_name", nullable = false, unique = true)
    private String productName;

    /**
     * The expiry date of the product.
     */
    @Column(name = "expiry_date", nullable = false)
    private LocalDate expiryDate;

    /**
     * The time duration within which the product should be marked down.
     */
    @Column(name = "time_duration_for_markdown", nullable = false)
    @Min(value = 0, message = "Time duration for markdown should not be negative")
    private Integer timeDurationForMarkDown;

    /**
     * Minimum threshold for alerts when stock goes below this level.
     */
    @Column(name = "min_threshold", nullable = false)
    @Min(value = 0, message = "Minimum threshold should not be negative")
    private Integer minThreshold;

    /**
     * Maximum threshold for maintaining stock.
     */
    @Column(name = "max_threshold", nullable = false)
    @Min(value = 0, message = "Maximum threshold should not be negative")
    private Integer maxThreshold;

    /**
     * The current stock level of the product.
     */
    @Column(name = "current_stock", nullable = false)
    @Min(value = 0, message = "Current stock should not be negative")
    private Integer currentStock;

    /**
     * Default constructor, required by JPA.
     */
    public Product() {
    }

    /**
     * Full constructor, initializes all fields.
     *
     * @param productID Unique identifier for the product
     * @param productName Name of the product
     * @param expiryDate Expiry date of the product
     * @param timeDurationForMarkDown Time duration for markdown
     * @param minThreshold Minimum threshold for alerts
     * @param maxThreshold Maximum threshold for stock
     * @param currentStock Current stock level
     */
    public Product(Long productID, String productName, LocalDate expiryDate, Integer timeDurationForMarkDown,
                   Integer minThreshold, Integer maxThreshold, Integer currentStock) {
        this.productID = productID;
        this.productName = productName;
        this.expiryDate = expiryDate;
        this.timeDurationForMarkDown = timeDurationForMarkDown;
        this.minThreshold = minThreshold;
        this.maxThreshold = maxThreshold;
        this.currentStock = currentStock;
    }

    // Getter and Setter methods

    public Long getProductID() {
        return productID;
    }

    public void setProductID(Long productID) {
        this.productID = productID;
    }

    public String getProductName() {
        return productName;
    }

    public void setProductName(String productName) {
        if (productName == null || productName.trim().isEmpty()) {
            logger.warn("Attempt to set an empty product name");
            throw new ProductValidationException("Product name cannot be empty");
        }
        this.productName = productName;
    }

    public LocalDate getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(LocalDate expiryDate) {
        this.expiryDate = expiryDate;
    }

    public Integer getTimeDurationForMarkDown() {
        return timeDurationForMarkDown;
    }

    public void setTimeDurationForMarkDown(Integer timeDurationForMarkDown) {
        this.timeDurationForMarkDown = timeDurationForMarkDown;
    }

    public Integer getMinThreshold() {
        return minThreshold;
    }

    public void setMinThreshold(Integer minThreshold) {
        this.minThreshold = minThreshold;
    }

    public Integer getMaxThreshold() {
        return maxThreshold;
    }

    public void setMaxThreshold(Integer maxThreshold) {
        this.maxThreshold = maxThreshold;
    }

    public Integer getCurrentStock() {
        return currentStock;
    }

    public void setCurrentStock(Integer currentStock) {
        if (currentStock < 0) {
            logger.error("Attempt to set negative current stock");
            throw new ProductValidationException("Current stock cannot be negative");
        }
        this.currentStock = currentStock;
    }

    @Override
    public String toString() {
        return "Product{" +
                "productID='" + productID + '\'' +
                ", productName='" + productName + '\'' +
                ", expiryDate=" + expiryDate +
                ", timeDurationForMarkDown=" + timeDurationForMarkDown +
                ", minThreshold=" + minThreshold +
                ", maxThreshold=" + maxThreshold +
                ", currentStock=" + currentStock +
                '}';
    }
}